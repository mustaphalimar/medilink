// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String?
  password   String
  role       Role        @default(PATIENT)
  superAdmin SuperAdmin?
  admin      Admin?
  patient    Patient?
  doctor     Doctor?
}

model SuperAdmin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Doctor {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @unique
  admins       Admin[]
  patients     Patient[]
  Appointment  Appointment[]
  Consultation Consultation[]
}

model Admin {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  doctor   Doctor @relation(fields: [doctorId], references: [id])
  doctorId String
}

model Patient {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String         @unique
  doctors      Doctor[]
  Appointment  Appointment[]
  gendre       String
  age          Int
  weight       Int
  height       Int
  MedicalFile  MedicalFile?
  Consultation Consultation[]
}

enum Role {
  SUPER_ADMIN
  DOCTOR
  ADMIN
  PATIENT
}

model Appointment {
  id        String            @id @default(uuid())
  date      DateTime
  status    AppointmentStatus @default(PENDING)
  patient   Patient           @relation(fields: [patientId], references: [id])
  patientId String
  doctor    Doctor            @relation(fields: [doctorId], references: [id])
  doctorId  String
}

enum AppointmentStatus {
  DONE
  SCHEDULED
  PENDING
  CANCELED
}

model MedicalFile {
  id           String         @id @default(uuid())
  patient      Patient        @relation(fields: [patientId], references: [id])
  patientId    String         @unique
  Consultation Consultation[]
}

model Consultation {
  id            String      @id @default(uuid())
  patient       Patient     @relation(fields: [patientId], references: [id])
  patientId     String      @unique
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  doctorId      String      @unique
  medicalFile   MedicalFile @relation(fields: [medicalFileId], references: [id])
  medicalFileId String      @unique
  instructions  String?
  medics        String?
}
